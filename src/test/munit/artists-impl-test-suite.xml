<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="artists-impl-test-suite.xml" />
	<global-property doc:name="Global Property" doc:id="fc9d6527-7439-4856-96d1-9e3b4e32cd6a" name="test" value="local" />
	<configuration-properties doc:name="Configuration properties" doc:id="1aea51a3-627a-4cdc-8dcb-58222471c7fa" file="properties/${test}.properties" />
	<munit:test name="sr-get-artist-info-test" doc:id="baecf2ca-78b1-44bd-874d-651446e650e5" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when Get Artist HTTP Request" doc:id="dd0b4935-0970-4066-9562-f773e3a8e902" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Get Artist Bio" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[readUrl("classpath://examples/lastFmResponseValid.json","application/json")]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="6d563a79-6c66-477f-af1d-aa5da5715a82" >
				<munit:variables >
					<munit:variable key="lastFmProperties" value="#[{method: p('last.fm.method'), apiKey: p('last.fm.api.key'), format: p('last.fm.format'), artist: 'The Beatles' }]" mediaType="application/java" />
					<munit:variable key="headerAttributes" value="#[{correlationId: '12345', clientId: '12345', clientSecret: '12345'}]" mediaType="application/java" />
				</munit:variables>

			</munit:set-event>
			<flow-ref doc:name="sr-get-artist-info" doc:id="1c900c2d-bb33-4d8f-b8a3-a696afc0a39f" name="sr-get-artist-info"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call doc:name="Verify call" doc:id="47c10243-1096-448f-99d0-095771273ebb" processor="http:request" times="#[1]">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Get Artist Bio" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="2e587f2a-1dfd-46f3-85e5-9e94885214cc" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="last-fm-http-config" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="/${last.fm.version}" attributeName="path" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:assert-equals doc:name="Assert statusCode is 201" doc:id="c06ba7ca-f60d-4df3-8e8e-a1735ade7a3c" actual="#[payload.statusCode]" expected="201" message="statusCode is 201"/>
			<munit-tools:assert-that doc:name="Assert that bioUrl found" doc:id="6466fbce-f2a4-4727-8271-6d1898a57327" expression="#[payload.bioUrl]" is='#[MunitTools::startsWith("https://")]' message="bioUrl failure"/>
		</munit:validation>
	</munit:test>
	<munit:test name="artists-impl-get-artists-test" doc:id="def028cd-e0ed-4c9e-ae57-66723d4a04eb" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="739b843b-2a56-477f-9eaa-b7a83a2afb57" processor="db:select">
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/java&#10;---&#10;[{&#10;	ARTIST_ID: 2,&#10;	GROUP_NM: "MUnit Test",&#10;	FIRST_NM: "John",&#10;	LAST_NM: "Lennon",&#10;	BIRTH_DATE: "1940-01-01",&#10;	DEATH_DATE: "1980-11-01"&#10;}]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="groupName queryParam" doc:id="c1d622a8-0d7f-462f-bee7-516c143d13d8" >
				<munit:attributes value='#[{queryParams: {"groupName":"MUnit Test"}}]' />
				<munit:variables >
					<munit:variable key="headerAttributes" value="#[{correlationId: '12345', clientId: '12345', clientSecret: '12345'}]" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-get-artists" doc:id="5cb3d905-bbae-48cf-90ec-d3077d43ae56" name="impl-get-artists"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that NOT null" doc:id="9921957f-7c53-4489-a3a4-5925dd05eaf6" is="#[MunitTools::notNullValue()]" message="NOT null" expression="#[payload]"/>
			<munit-tools:assert-that doc:name="Assert that Artist firstName" doc:id="2ddb4282-fc08-49c4-a1f2-9a4a428c92c1" message="NOT John" expression="#[payload.artists[0].firstName as String]" is="#[MunitTools::startsWith('John')]"/>
			<munit-tools:assert-that doc:name="Assert that Artist lastName" doc:id="74c210d4-b2a1-4aec-88f8-4b259098ed5c" is="#[MunitTools::startsWith('Lennon')]" expression="#[payload.artists[0].lastName as String]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="artists-impl-add-artists-test" doc:id="14b32317-1d7b-4b25-a690-1f32bd466e97" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when flow-ref" doc:id="d2d39f8d-49c6-4ec3-a9db-d294a3910a11" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="f76d65e3-c827-4a9a-9c9e-4613921c1190" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="getArtistResponse" value="#[{&quot;statusCode&quot;: &quot;200&quot;, &quot;message&quot;: &quot;SUCCESS&quot;, &quot;searchCriteria&quot;: &quot;[lastName: 'Hickman', firstName: 'Johnny', groupName: 'Telegraph Canyon', birthDate: '1988-01-29', ]&quot;, &quot;artists&quot;: []}]" mediaType="application/java" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when insert artists" doc:id="4d1fc468-057b-41cf-95ce-b40655e563e8" processor="db:insert"/>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Post Artist Array" doc:id="b89a655b-3ed7-4a56-aa7a-4ca9d42ad1fd" >
				<munit:payload value='#[{&#10;  "artists": [&#10;    {&#10;      "groupName": "Telegraph Canyon",&#10;      "lastName": "Hickman",&#10;      "firstName": "Jill",&#10;      "dateOfBirth": "1988-01-29"&#10;    },&#10;    {&#10;      "groupName": "Telegraph Canyon",&#10;      "lastName": "Harrison",&#10;      "firstName": "Ted",&#10;      "mi": "B",&#10;      "dateOfBirth": "1982-03-21",&#10;"dateOfDeath": "2019-01-15"&#10;    }&#10;  ]&#10;}]' />
				<munit:variables >
					<munit:variable key="headerAttributes" value="#[{correlationId: '12345', clientId: '12345', clientSecret: '12345'}]" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="impl-add-artists" doc:id="ae0fed1f-cfbd-4b7d-868d-e24dbabb9cea" name="impl-add-artists"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that NOT null" doc:id="4fb51841-90b0-4637-a0d7-6947c018c2fa" is="#[MunitTools::notNullValue()]" expression="#[payload]" message="NOT null"/>
			<munit-tools:assert-that doc:name="Assert that added = 2" doc:id="10c93737-71a9-4fc0-9477-bc997ca7740b" is="#[MunitTools::equalTo(2)]" expression="#[sizeOf(payload.results.addedArtists)]" message="added = 2"/>
		</munit:validation>
	</munit:test>
	<munit:test name="artists-impl-add-artists-duplicates-test" doc:id="dd1f2a87-209b-4a1b-a4e4-c576418f88cd" description="Test" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when flow-ref" doc:id="9a0b26c0-4b77-483c-b2d8-e59ac16177a9" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="f76d65e3-c827-4a9a-9c9e-4613921c1190" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="getArtistResponse" value="#[{&quot;statusCode&quot;: &quot;200&quot;, &quot;message&quot;: &quot;SUCCESS&quot;, &quot;searchCriteria&quot;: &quot;[lastName: 'Hickman', firstName: 'Johnny', groupName: 'Telegraph Canyon', birthDate: '1988-01-29', ]&quot;, &quot;artists&quot;: [{&quot;artistId&quot;: 4,&quot;groupName&quot;: &quot;Telegraph Canyon&quot;,&quot;lastName&quot;: &quot;Hickman&quot;,&quot;firstName&quot;: &quot;Johnny&quot;,&quot;mi&quot;: &quot;&quot;,&quot;dateOfBirth&quot;: &quot;1988-01-29&quot;,&quot;dateOfDeath&quot;: &quot;&quot;}]}]" mediaType="application/java" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when insert artists" doc:id="f21c232c-1763-4035-9c73-638ff98c2e99" processor="db:insert" />
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Post Artist Array" doc:id="a3f67799-dd89-4df5-a218-26f69a3b69ac" >
				<munit:payload value='#[{&#10;  "artists": [&#10;    {&#10;      "groupName": "Telegraph Canyon",&#10;      "lastName": "Hickman",&#10;      "firstName": "Jill",&#10;      "dateOfBirth": "1988-01-29"&#10;    },&#10;    {&#10;      "groupName": "Telegraph Canyon",&#10;      "lastName": "Harrison",&#10;      "firstName": "Ted",&#10;      "mi": "B",&#10;      "dateOfBirth": "1982-03-21",&#10;"dateOfDeath": "2019-01-15"&#10;    }&#10;  ]&#10;}]' />
				<munit:variables >
					<munit:variable key="headerAttributes" value="#[{correlationId: '12345', clientId: '12345', clientSecret: '12345'}]" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="impl-add-artists" doc:id="67c44a70-7df1-4fe1-b71a-4a71ddf0c9c5" name="impl-add-artists" />
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that NOT null" doc:id="f90440ca-194d-4f75-8ec5-4b971ea3148e" message="NOT null" expression="#[payload]" is="#[MunitTools::notNullValue()]" />
			<munit-tools:assert-that doc:name="duplicates = 2" doc:id="9142f755-64e8-4f4c-9be7-29455ad08902" message="duplicates = 2" expression="#[sizeOf(payload.results.duplicatedArtists)]" is="#[MunitTools::equalTo(2)]" />
		</munit:validation>
	</munit:test>


</mule>
