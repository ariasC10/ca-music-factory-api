<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:sps-logger="http://www.mulesoft.org/schema/mule/sps-logger" xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sps-logger http://www.mulesoft.org/schema/mule/sps-logger/current/mule-sps-logger.xsd">
	<sub-flow name="impl-get-albums" doc:id="b22d8ba8-1699-4bc6-bacd-fb724f392a8c" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="dc4da29e-46ce-4858-b49b-eef718c21f18" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-albums::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}s" config-ref="SPS_Logger_Config"/>
		<set-variable value="#[attributes.queryParams.albumTitle]" doc:name="albumTitle" doc:id="fdb49dd1-dd34-4701-8687-cc4267186c5f" variableName="albumTitle"/>
		<sps-logger:sps-logger doc:name="Album Title" doc:id="1beb4dfb-4cfb-4555-a826-0c416712582e" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-albums::START::payload:'  ++ write(payload, 'application/json')]" category=" ${logcat}"/>
		<db:select doc:name="SELECT albums" doc:id="1c3927a5-f5e8-484f-b67f-a4c3296ed4cf" config-ref="mysql-config">
			<db:sql ><![CDATA[SELECT DISTINCT ALB.ALBUM_ID, ALB.TITLE, ALB.GENRE, ALB.PUBLICATION_DT, ART.GROUP_NM, ART.ARTIST_ID
FROM bc_album ALB LEFT OUTER JOIN BC_ARTIST ART 
ON ART.ARTIST_ID = ALB.ARTIST_ID
WHERE ALB.TITLE LIKE :albumTitle
GROUP BY ALB.TITLE]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
  albumTitle: vars.albumTitle ++ '%'
}]]]></db:input-parameters>
		</db:select>
		<sps-logger:sps-logger doc:name="SELECT Albums" doc:id="25f2d4a1-61fa-4bde-b15f-7c20c0ac6689" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="AFTER REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-albums::SELECT::payload:' ++ write(payload, 'application/json')]" category="${logcat}"/>
		<ee:transform doc:name="payload" doc:id="49c5d87d-e699-41c7-b3eb-97d9a15e22e5" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	statusCode: p('http.get.status.ok'),
	message: p('http.get.message.ok'),
	searchCriteria: vars.albumTitle,
	albums: payload map ( albums ) -> {
		albumId: albums.ALBUM_ID,
		albumTitle: albums.TITLE default "",
		genre: albums.GENRE default "",
		publicationDate: albums.PUBLICATION_DT as String { format: "yyyy-MM-dd" },
		artistId: (albums.ARTIST_ID default 0),
		groupName: albums.GROUP_NM default ""
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sps-logger:sps-logger doc:name="INFO END" doc:id="f733f3d8-b62b-4fcf-8b7b-279b848ff25f" config-ref="SPS_Logger_Config" eventName="END" message="#['impl-get-albums::END::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
	</sub-flow>
	<flow name="impl-add-albums" doc:id="8d4ccfd1-0bfa-49ee-b885-ec2465204479" >
		<http:listener doc:name="Listener" doc:id="a6a0e653-1ae9-4a98-a5e4-7afc6d6a2eca" config-ref="http-listener-config" path="/batchAddAlbums"/>
		<sps-logger:sps-logger doc:name="INFO START" doc:id="e89bc94d-6596-42cf-a124-48daa8ca615f" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<ee:transform doc:name="Transform Message" doc:id="2189a962-dc3d-4dbc-ac67-d6d8df7116af" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload.albums]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sps-logger:sps-logger doc:name="After Transform" doc:id="27b86154-2a02-4ddc-9c1b-76f8a32cf279" config-ref="SPS_Logger_Config" eventName="AFTER TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::Transform: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<set-variable value="#[sizeOf(payload)]" doc:name="numberOfAlbums" doc:id="3f6f8b71-b0a7-433f-a565-3339565a76ce" variableName="numberOfAlbums"/>
		<sps-logger:sps-logger doc:name="Number of Albums" doc:id="707f723e-c600-4d24-9d8f-ebc7415205bb" config-ref="SPS_Logger_Config" level="WARN" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::numberOfAlbums: '  ++ write(vars.numberOfAlbums, 'application/json')]" category="${logcat}"/>
		<batch:job jobName="impl-add-albums-batch-job" doc:id="479a3f17-054f-4167-9837-3c58b8faa7b0" maxFailedRecords="10">
			<batch:process-records >
				<batch:step name="process-all-records" doc:id="e497700c-e0a7-494e-9a99-43f3c21ddc6a" >
					<sps-logger:sps-logger doc:name="Batch Start" doc:id="147faa35-84f5-448a-8d10-9aeb26fe2b55" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::Batch::Start: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
					<set-payload value='#[%dw 2.0&#10;output application/java&#10;---&#10;{&#10;		albumIdParam: 		0,&#10;		titleParam: 		payload.albumTitle,&#10;		genreParam: 		payload.genre,&#10;		publicationParam: 	payload.publicationDate,&#10;		statusParam: 	"CA",&#10;		artistIdParam: 	payload.artistId&#10;}]' doc:name="Insert payload" doc:id="8d4077c2-bbe5-4d25-9d0c-1ba6a372fb55" />
					<sps-logger:sps-logger doc:name="Insert Payload" doc:id="0353c1dd-71a0-45d2-95f1-9d05a1f68a9a" config-ref="SPS_Logger_Config" eventName="AFTER TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::Batch::payload: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
					<batch:aggregator doc:name="bulk-insert-albums" doc:id="4dc26e1c-c095-4694-a03e-55b130ab3f59" size="3">
						<sps-logger:sps-logger doc:name="BULK START" doc:id="9c85fb0b-13d4-489e-a66d-ceb8f025b725" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::BulkStart::payload: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
						<db:bulk-insert doc:name="Bulk insert Album" doc:id="838bb622-ed42-41a7-8f76-15ebb75f7614" config-ref="mysql-config">
							<db:sql ><![CDATA[insert into BC_MUSIC_FACTORY.BC_ALBUM 
   (album_id,title, genre, publication_dt, status_cd, artist_id) values
       (:albumIdParam,
        :titleParam,
        :genreParam,
        :publicationParam,
        :statusParam,
        :artistIdParam)
]]></db:sql>
						</db:bulk-insert>
						<sps-logger:sps-logger doc:name="BULK END" doc:id="69fcf0d6-4e0b-4d31-89ee-81cd06f93554" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::BulkEnd::payload: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
					</batch:aggregator>
				</batch:step>
				<batch:step name="failures-only-step" doc:id="94c5a388-5d5a-4699-a204-b81a1260cd5d" acceptPolicy="ONLY_FAILURES">
					<sps-logger:sps-logger doc:name="Failure" doc:id="dd573c96-e0d5-4f22-a355-3dcc0745036e" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="WARN" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::Batch::FailuresOnlyStep:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
					<db:insert doc:name="Record Album Title as Error" doc:id="27e1741d-fee6-4bc3-bb6c-053040774372" config-ref="mysql-config">
						<db:sql ><![CDATA[INSERT INTO BC_MUSIC_FACTORY.BC_STAGING_ERROR (STAGING_ID, STAGING_RECORD, STATUS_CD) 
    VALUES (NULL, :stagingRecord, :statusParam)]]></db:sql>
						<db:input-parameters ><![CDATA[#[{
    stagingRecord: payload.titleParam as String,
    statusParam: payload.statusParam as String
}]]]></db:input-parameters>
					</db:insert>
					<sps-logger:sps-logger doc:name="Insert Failure" doc:id="83e4c373-f14a-4d05-941a-8fe2b56f6475" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="AFTER REQUEST" level="WARN" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::Batch::InsertFailure: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
				</batch:step>
			</batch:process-records>
			<batch:on-complete >
				<sps-logger:sps-logger doc:name="Before Transform" doc:id="8b001c16-a17a-4b33-a481-8d0d6ea8dede" config-ref="SPS_Logger_Config" eventName="BEFORE TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::OnComplete::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
				<ee:transform doc:name="batchReport" doc:id="d4dd8e79-75ba-4105-bba6-e47c8e34bf71" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var batchSummary = payload
---
{
	"totalRecords": batchSummary.totalRecords default 0,
	"failedRecords": batchSummary.failedRecords default 0,
	"successfulRecords": batchSummary.successfulRecords default 0
}
]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<sps-logger:sps-logger doc:name="INFO END" doc:id="463b8488-b4e5-466d-ae3d-32be572a7b02" eventName="END" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::OnComplete::End:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
			</batch:on-complete>
		</batch:job>
	</flow>

	
</mule>
